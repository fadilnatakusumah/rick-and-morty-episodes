{"version":3,"sources":["pages/Favorites.tsx","store/actions.tsx"],"names":["Favorites","useContext","Store","state","dispatch","favorites","Fragment","style","textAlign","length","width","height","margin","display","alignItems","map","episode","marginBottom","position","alt","name","src","image","original","borderRadius","onClick","toggleFav","color","id","find","fav","right","bottom","fontSize","cursor","icon","faHeart","padding","href","url","rel","target","textDecoration","marginLeft","HtmlParser","summary","fetchData","a","axios","get","response","status","type","payload","data","newFav","filter","console","log"],"mappings":"oIAAA,0EAkEeA,UA1Df,WAAsB,IAAD,EACSC,qBAAWC,KAA/BC,EADW,EACXA,MAAOC,EADI,EACJA,SAEPC,EAAcF,EAAdE,UAQR,OACE,kBAAC,IAAMC,SAAP,KACE,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,0BACsB,IAArBH,EAAUI,QACT,yBAAKF,MAAO,CACVG,MAAO,QACPC,OAAQ,QACRH,UAAW,SACXI,OAAQ,QACRC,QAAS,OACTC,WAAY,WAEZ,sEAIFT,EAAUI,OAAS,GACnBJ,EAAUU,KAAI,SAACC,GAAD,OACZ,yBAAKT,MAAO,CAAEC,UAAW,SAAUS,aAAc,SAC/C,yBAAKV,MAAO,CAAEC,UAAW,SAAUU,SAAU,aAC3C,yBAAKC,IAAKH,EAAQI,KAAMC,IAAKL,EAAQM,MAAMC,SAAUb,MAAO,IAAKH,MAAO,CAAEiB,aAAc,UACxF,0BACEC,QAAS,kBAAMC,YAAUV,EAASb,EAAOC,IACzCG,MAAO,CACLoB,OA9BCC,EA8BcZ,EAAQY,GA7BvBzB,EAAME,UAAUwB,MAAK,SAACC,GAAD,OAAcA,EAAIF,KAAOA,KA6BjB,MAAQ,SACrCV,SAAU,WACVa,MAAO,OACPC,OAAQ,OACRC,SAAU,MACVC,OAAQ,YACP,kBAAC,IAAD,CAAiBC,KAAMC,QAE9B,yBAAK7B,MAAO,CAAEC,UAAW,OAAQ6B,QAAS,aACxC,8BACE,2BAAO9B,MAAO,CAAE0B,SAAU,QAAUjB,EAAQI,MAC5C,uBAAGkB,KAAMtB,EAAQuB,IAAKC,IAAI,sBAAsBC,OAAO,SAASlC,MAAO,CAAEmC,eAAgB,OAAQC,WAAY,SAA7G,eAEDC,IAAW5B,EAAQ6B,WA3ChB,IAACjB,Q,0JCRNkB,EAAS,uCAAG,WAAO1C,GAAP,eAAA2C,EAAA,4DACX,0EADW,SAEAC,IAAMC,IADjB,2EADW,UAGC,OADlBC,EAFiB,QAGVC,OAHU,yCAId/C,EAAS,CAAEgD,KAAM,QAASC,QAAS,QAJrB,gCAMhBjD,EAAS,CAAEgD,KAAM,aAAcC,QAASH,EAASI,QANjC,2CAAH,sDAUT5B,EAAY,SAACV,EAAcb,EAAeC,GAErD,GADcD,EAAME,UAAUwB,MAAK,SAAAC,GAAG,OAAIA,EAAIF,KAAOZ,EAAQY,MAClD,CACT,IAAM2B,EAASpD,EAAME,UAAUmD,QAAO,SAAA1B,GAAG,OAAIA,EAAIF,KAAOZ,EAAQY,MAEhE,OADA6B,QAAQC,IAAI,SAAUH,GACfnD,EAAS,CAAEgD,KAAM,aAAcC,QAASE,IAGjD,OAAOnD,EAAS,CAAEgD,KAAM,UAAWC,QADvB,sBAAOlD,EAAME,WAAb,CAAwBW,Q","file":"static/js/4.5349cbad.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport { Store } from '../store';\nimport { IState } from '../store/interfaces';\nimport { toggleFav } from '../store/actions';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport HtmlParser from 'react-html-parser';\n\nfunction Favorites() {\n  const { state, dispatch } = useContext(Store);\n\n  const { favorites } = state;\n\n  const isLiked = (id: number) => {\n    const check = state.favorites.find((fav: any) => fav.id === id);\n    if (check) { return true }\n    return false\n  };\n\n  return (\n    <React.Fragment>\n      <h3 style={{ textAlign: 'center' }}>Your favorite episodes</h3>\n      {favorites.length === 0 &&\n        <div style={{\n          width: '300px',\n          height: '400px',\n          textAlign: 'center',\n          margin: ' auto',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <p>You don't have any favorite episode :(</p>\n        </div>\n      }\n      {\n        favorites.length > 0 &&\n        favorites.map((episode: any) => (\n          <div style={{ textAlign: 'center', marginBottom: '10px' }}>\n            <div style={{ textAlign: 'center', position: 'relative' }}>\n              <img alt={episode.name} src={episode.image.original} width={330} style={{ borderRadius: '10px' }} />\n              <span\n                onClick={() => toggleFav(episode, state, dispatch)}\n                style={{\n                  color: isLiked(episode.id) ? 'red' : 'black',\n                  position: 'absolute',\n                  right: '40px',\n                  bottom: '10px',\n                  fontSize: '2em',\n                  cursor: 'pointer'\n                }}><FontAwesomeIcon icon={faHeart} /></span>\n            </div>\n            <div style={{ textAlign: 'left', padding: '5px 20px' }}>\n              <span>\n                <label style={{ fontSize: '2em' }}>{episode.name}</label>\n                <a href={episode.url} rel=\"noopener noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', marginLeft: '10px' }}>Look it up</a>\n              </span>\n              {HtmlParser(episode.summary)}\n            </div>\n          </div>\n        ))\n      }\n    </React.Fragment >\n  )\n\n}\n\nexport default Favorites\n","import axios from 'axios';\nimport { useContext } from 'react';\nimport { Store } from '.';\nimport { IAction, IState } from './interfaces';\n\nexport const fetchData = async (dispatch: React.Dispatch<IAction>) => {\n  const URL = \"https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes\";\n  const response = await axios.get<string>(URL)\n  if (response.status !== 200) {\n    return dispatch({ type: \"ERROR\", payload: null });\n  }\n  return dispatch({ type: \"FETCH_DATA\", payload: response.data });\n}\n\n\nexport const toggleFav = (episode: any, state: IState, dispatch: React.Dispatch<IAction>) => {\n  const check = state.favorites.find(fav => fav.id === episode.id);\n  if (check) {\n    const newFav = state.favorites.filter(fav => fav.id !== episode.id);\n    console.log(\"newFav\", newFav)\n    return dispatch({ type: \"REMOVE_FAV\", payload: newFav });\n  }\n  const newFav = [...state.favorites, episode];\n  return dispatch({ type: \"ADD_FAV\", payload: newFav });\n}\n\n"],"sourceRoot":""}