{"version":3,"sources":["pages/Home.tsx","store/actions.tsx"],"names":["Home","useContext","Store","state","dispatch","useEffect","episodes","length","fetchData","Fragment","style","textAlign","map","episode","marginBottom","position","alt","name","src","image","original","width","borderRadius","onClick","toggleFav","color","id","favorites","find","fav","right","bottom","fontSize","cursor","icon","faHeart","padding","href","url","rel","target","textDecoration","marginLeft","HTMLParser","summary","a","axios","get","response","status","type","payload","data","newFav","filter","console","log"],"mappings":"oIAAA,0EAuDeA,UAhDf,WAAiB,IAAD,EACcC,qBAAWC,KAA/BC,EADM,EACNA,MAAOC,EADD,EACCA,SAEfC,qBAAU,WACkB,IAA1BF,EAAMG,SAASC,QAAgBC,YAAUJ,MAJ7B,IAONE,EAAaH,EAAbG,SAQR,OACE,kBAAC,IAAMG,SAAP,KACE,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,iCACCL,EAASC,OAAS,GACjBD,EAASM,KAAI,SAACC,GAAD,OACX,yBAAKH,MAAO,CAAEC,UAAW,SAAUG,aAAc,SAC/C,yBAAKJ,MAAO,CAAEC,UAAW,SAAUI,SAAU,aAC3C,yBAAKC,IAAKH,EAAQI,KAAMC,IAAKL,EAAQM,MAAMC,SAAUC,MAAO,IAAKX,MAAO,CAAEY,aAAc,UACxF,0BACEC,QAAS,kBAAMC,YAAUX,EAASV,EAAOC,IACzCM,MAAO,CACLe,OAjBCC,EAiBcb,EAAQa,GAhBvBvB,EAAMwB,UAAUC,MAAK,SAACC,GAAD,OAAcA,EAAIH,KAAOA,KAgBjB,MAAQ,SACrCX,SAAU,WACVe,MAAO,OACPC,OAAQ,OACRC,SAAU,MACVC,OAAQ,YACP,kBAAC,IAAD,CAAiBC,KAAMC,QAE9B,yBAAKzB,MAAO,CAAEC,UAAW,OAAQyB,QAAS,aACxC,8BACE,2BAAO1B,MAAO,CAAEsB,SAAU,QAAUnB,EAAQI,MAC5C,uBAAGoB,KAAMxB,EAAQyB,IAAKC,IAAI,sBAAsBC,OAAO,SAAS9B,MAAO,CAAE+B,eAAgB,OAAQC,WAAY,SAA7G,eAEDC,IAAW9B,EAAQ+B,WA9BhB,IAAClB,Q,0JCXNlB,EAAS,uCAAG,WAAOJ,GAAP,eAAAyC,EAAA,4DACX,0EADW,SAEAC,IAAMC,IADjB,2EADW,UAGC,OADlBC,EAFiB,QAGVC,OAHU,yCAId7C,EAAS,CAAE8C,KAAM,QAASC,QAAS,QAJrB,gCAMhB/C,EAAS,CAAE8C,KAAM,aAAcC,QAASH,EAASI,QANjC,2CAAH,sDAUT5B,EAAY,SAACX,EAAcV,EAAeC,GAErD,GADcD,EAAMwB,UAAUC,MAAK,SAAAC,GAAG,OAAIA,EAAIH,KAAOb,EAAQa,MAClD,CACT,IAAM2B,EAASlD,EAAMwB,UAAU2B,QAAO,SAAAzB,GAAG,OAAIA,EAAIH,KAAOb,EAAQa,MAEhE,OADA6B,QAAQC,IAAI,SAAUH,GACfjD,EAAS,CAAE8C,KAAM,aAAcC,QAASE,IAGjD,OAAOjD,EAAS,CAAE8C,KAAM,UAAWC,QADvB,sBAAOhD,EAAMwB,WAAb,CAAwBd,Q","file":"static/js/5.67b71e8d.chunk.js","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport { Store } from '../store'\nimport HTMLParser from 'react-html-parser'\nimport { fetchData, toggleFav } from '../store/actions'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\n\nfunction Home() {\n  const { state, dispatch } = useContext(Store);\n\n  useEffect(() => {\n    state.episodes.length === 0 && fetchData(dispatch);\n  })\n\n  const { episodes } = state;\n\n  const isLiked = (id: number) => {\n    const check = state.favorites.find((fav: any) => fav.id === id);\n    if (check) { return true }\n    return false\n  };\n\n  return (\n    <React.Fragment>\n      <h3 style={{ textAlign: 'center' }}>Choose your favorite episodes</h3>\n      {episodes.length > 0 &&\n        episodes.map((episode: any) => (\n          <div style={{ textAlign: 'center', marginBottom: '10px' }}>\n            <div style={{ textAlign: 'center', position: 'relative' }}>\n              <img alt={episode.name} src={episode.image.original} width={330} style={{ borderRadius: '10px' }} />\n              <span\n                onClick={() => toggleFav(episode, state, dispatch)}\n                style={{\n                  color: isLiked(episode.id) ? 'red' : 'black',\n                  position: 'absolute',\n                  right: '40px',\n                  bottom: '10px',\n                  fontSize: '2em',\n                  cursor: 'pointer'\n                }}><FontAwesomeIcon icon={faHeart} /></span>\n            </div>\n            <div style={{ textAlign: 'left', padding: '5px 20px' }}>\n              <span>\n                <label style={{ fontSize: '2em' }}>{episode.name}</label>\n                <a href={episode.url} rel=\"noopener noreferrer\" target=\"_blank\" style={{ textDecoration: 'none', marginLeft: '10px' }}>Look it up</a>\n              </span>\n              {HTMLParser(episode.summary)}\n            </div>\n          </div>\n        ))\n      }\n    </React.Fragment >\n  )\n}\n\nexport default Home\n","import axios from 'axios';\nimport { useContext } from 'react';\nimport { Store } from '.';\nimport { IAction, IState } from './interfaces';\n\nexport const fetchData = async (dispatch: React.Dispatch<IAction>) => {\n  const URL = \"https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes\";\n  const response = await axios.get<string>(URL)\n  if (response.status !== 200) {\n    return dispatch({ type: \"ERROR\", payload: null });\n  }\n  return dispatch({ type: \"FETCH_DATA\", payload: response.data });\n}\n\n\nexport const toggleFav = (episode: any, state: IState, dispatch: React.Dispatch<IAction>) => {\n  const check = state.favorites.find(fav => fav.id === episode.id);\n  if (check) {\n    const newFav = state.favorites.filter(fav => fav.id !== episode.id);\n    console.log(\"newFav\", newFav)\n    return dispatch({ type: \"REMOVE_FAV\", payload: newFav });\n  }\n  const newFav = [...state.favorites, episode];\n  return dispatch({ type: \"ADD_FAV\", payload: newFav });\n}\n\n"],"sourceRoot":""}